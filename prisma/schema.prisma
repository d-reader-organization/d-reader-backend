generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["extendedWhereUnique", "filteredRelationCount"]
  // https://www.prisma.io/docs/concepts/components/prisma-client/full-text-search
  // https://www.prisma.io/docs/reference/api-reference/prisma-client-reference#compare-columns-in-the-same-table
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator dbml {
  provider = "prisma-dbml-generator"
}

model Wallet {
  address            String                @id
  name               String                @unique
  avatar             String                @default("")
  createdAt          DateTime              @default(now())
  lastLogin          DateTime?
  nonce              String                @unique @default(uuid())
  role               Role                  @default(User)
  creator            Creator?
  comics             WalletComic[]
  comicIssues        WalletComicIssue[]
  newsletter         Newsletter?
  walletCreator      WalletCreator[]
  mintReceipts       CandyMachineReceipt[]
  nfts               Nft[]
  referrerAddress    String?
  referralsRemaining Int                   @default(0)
  referrer           Wallet?               @relation("ReferrerToReferral", fields: [referrerAddress], references: [address])
  referrals          Wallet[]              @relation("ReferrerToReferral")
  referredAt         DateTime?
}

enum Role {
  Superadmin
  Admin
  User
}

model Creator {
  id               Int             @id @default(autoincrement())
  email            String          @unique
  // password         String
  name             String          @unique
  slug             String          @unique
  avatar           String          @default("")
  banner           String          @default("")
  logo             String          @default("")
  description      String          @default("")
  flavorText       String          @default("")
  website          String          @default("")
  // twitter          String    @default("")
  // instagram        String    @default("")
  createdAt        DateTime        @default(now())
  deletedAt        DateTime?
  featuredAt       DateTime?
  verifiedAt       DateTime?
  popularizedAt    DateTime?
  emailConfirmedAt DateTime?
  comics           Comic[]
  wallet           Wallet          @relation(fields: [walletAddress], references: [address], onDelete: Cascade)
  walletAddress    String          @unique
  walletCreator    WalletCreator[]
}

enum AudienceType {
  Everyone
  Teen
  TeenPlus
  Mature
}

model Comic {
  name          String
  slug          String        @id
  audienceType  AudienceType  @default(Everyone)
  cover         String        @default("")
  banner        String        @default("")
  pfp           String        @default("")
  logo          String        @default("")
  description   String        @default("")
  flavorText    String        @default("")
  website       String        @default("")
  twitter       String        @default("")
  discord       String        @default("")
  telegram      String        @default("")
  instagram     String        @default("")
  tikTok        String        @default("")
  youTube       String        @default("")
  updatedAt     DateTime      @updatedAt
  createdAt     DateTime      @default(now())
  deletedAt     DateTime?
  featuredAt    DateTime?
  verifiedAt    DateTime?
  publishedAt   DateTime?
  popularizedAt DateTime?
  completedAt   DateTime?
  genres        Genre[]
  issues        ComicIssue[]
  wallets       WalletComic[]
  creator       Creator       @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId     Int
}

model WalletComic {
  comic         Comic     @relation(fields: [comicSlug], references: [slug], onDelete: Cascade)
  comicSlug     String
  wallet        Wallet    @relation(fields: [walletAddress], references: [address], onDelete: Cascade)
  walletAddress String
  rating        Int?
  isSubscribed  Boolean   @default(false)
  isFavourite   Boolean   @default(false)
  isWhitelisted Boolean   @default(false)
  viewedAt      DateTime?
  // isReported Boolean @default(false)
  // isLiked    Boolean @default(false)

  @@id([comicSlug, walletAddress])
}

model Genre {
  name      String    @unique
  slug      String    @id
  icon      String    @default("")
  priority  Int
  color     String
  deletedAt DateTime?
  comics    Comic[]
}

model ComicIssue {
  id                   Int                @id @default(autoincrement())
  number               Int
  supply               Int
  discountMintPrice    Int
  mintPrice            Int
  sellerFeeBasisPoints Int
  title                String
  slug                 String
  description          String             @default("")
  flavorText           String             @default("")
  cover                String             @default("")
  signedCover          String             @default("")
  usedCover            String             @default("")
  usedSignedCover      String             @default("")
  releaseDate          DateTime
  updatedAt            DateTime           @updatedAt
  createdAt            DateTime           @default(now())
  deletedAt            DateTime?
  featuredAt           DateTime?
  verifiedAt           DateTime?
  publishedAt          DateTime?
  popularizedAt        DateTime?
  comic                Comic              @relation(fields: [comicSlug], references: [slug], onDelete: Cascade)
  comicSlug            String
  collectionNft        CollectionNft?
  pages                ComicPage[]
  wallets              WalletComicIssue[]

  @@unique([number, comicSlug])
  @@unique([slug, comicSlug])
  @@unique([title, comicSlug])
}

model Nft {
  address              String               @id
  metadata             Metadata             @relation(fields: [uri], references: [uri])
  uri                  String
  name                 String
  owner                Wallet               @relation(fields: [ownerAddress], references: [address])
  ownerAddress         String
  candyMachine         CandyMachine         @relation(fields: [candyMachineAddress], references: [address])
  candyMachineAddress  String
  collectionNft        CollectionNft        @relation(fields: [collectionNftAddress], references: [address])
  collectionNftAddress String
  receipt              CandyMachineReceipt?
  listing              Listing[]
}

model CandyMachine {
  address              String                @id
  mintAuthorityAddress String
  itemsAvailable       Int
  itemsMinted          Int
  itemsRemaining       Int
  itemsLoaded          Int
  isFullyLoaded        Boolean
  endsAt               DateTime?
  baseMintPrice        Int
  collectionNft        CollectionNft         @relation(fields: [collectionNftAddress], references: [address])
  collectionNftAddress String
  items                Nft[]
  receipts             CandyMachineReceipt[]
}

model CandyMachineReceipt {
  nftAddress          String       @id
  nft                 Nft          @relation(fields: [nftAddress], references: [address])
  buyer               Wallet       @relation(fields: [buyerAddress], references: [address])
  buyerAddress        String
  price               Int
  timestamp           DateTime
  description         String
  candyMachine        CandyMachine @relation(fields: [candyMachineAddress], references: [address], onDelete: Cascade)
  candyMachineAddress String
}

// ComicCollectionNft

model CollectionNft {
  address         String         @id
  uri             String
  name            String
  comicIssue      ComicIssue     @relation(fields: [comicIssueId], references: [id])
  comicIssueId    Int            @unique
  collectionItems Nft[]
  candyMachines   CandyMachine[]
}

model ComicPage {
  id            Int        @id @default(autoincrement())
  pageNumber    Int        @default(autoincrement())
  isPreviewable Boolean    @default(false)
  image         String
  comicIssue    ComicIssue @relation(fields: [comicIssueId], references: [id], onDelete: Cascade)
  comicIssueId  Int

  @@unique([pageNumber, comicIssueId])
}

model CarouselSlide {
  id           Int              @id @default(autoincrement())
  image        String
  title        String           @default("")
  subtitle     String           @default("")
  priority     Int
  comicIssueId Int?
  comicSlug    String?
  creatorSlug  String?
  externalLink String?
  publishedAt  DateTime         @default(now())
  expiredAt    DateTime
  location     CarouselLocation @default(Home)
}

enum CarouselLocation {
  Home
}

model Newsletter {
  wallet                       Wallet    @relation(fields: [walletAddress], references: [address], onDelete: Cascade)
  walletAddress                String    @id
  email                        String    @unique
  subscribedAt                 DateTime  @default(now())
  updatedAt                    DateTime? @updatedAt
  wantsDevelopmentProgressNews Boolean
  wantsPlatformContentNews     Boolean
  wantsFreeNFTs                Boolean
  ip                           String    @default("")
  country                      String    @default("")
  city                         String    @default("")
  browser                      String    @default("")
  device                       String    @default("")
  os                           String    @default("")
}

model WalletComicIssue {
  comicIssue    ComicIssue @relation(fields: [comicIssueId], references: [id], onDelete: Cascade)
  comicIssueId  Int
  wallet        Wallet     @relation(fields: [walletAddress], references: [address], onDelete: Cascade)
  walletAddress String
  rating        Int?
  isSubscribed  Boolean    @default(false)
  isFavourite   Boolean    @default(false)
  isWhitelisted Boolean    @default(false)
  viewedAt      DateTime?
  readAt        DateTime?
  // isReported Boolean @default(false)
  // isLiked    Boolean @default(false)

  @@id([comicIssueId, walletAddress])
}

model WalletCreator {
  creator       Creator @relation(fields: [creatorSlug], references: [slug], onDelete: Cascade)
  creatorSlug   String
  wallet        Wallet  @relation(fields: [walletAddress], references: [address], onDelete: Cascade)
  walletAddress String
  isFollowing   Boolean @default(false)

  @@id([creatorSlug, walletAddress])
}

model Metadata {
  uri            String  @id
  nft            Nft[]
  collectionName String
  isUsed         Boolean
  isSigned       Boolean
}

model Listing {
  id         Int       @id @default(autoincrement())
  nftAddress String
  nft        Nft       @relation(fields: [nftAddress], references: [address])
  price      Int
  feePayer   String
  signature  String
  symbol     String
  createdAt  DateTime
  canceledAt DateTime
  soldAt     DateTime?

  @@unique([nftAddress, canceledAt])
}
