generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["extendedWhereUnique", "filteredRelationCount"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator dbml {
  provider = "prisma-dbml-generator"
}

model Wallet {
  address       String                @id
  label         String                @default("")
  avatar        String                @default("")
  createdAt     DateTime              @default(now())
  lastLogin     DateTime?
  nonce         String                @unique @default(uuid())
  role          Role                  @default(User)
  creator       Creator?
  comics        WalletComic[]
  comicIssues   WalletComicIssue[]
  newsletter    Newsletter?
  walletCreator WalletCreator[]
  mintReceipts  CandyMachineReceipt[]
  nfts          Nft[]
}

enum Role {
  Superadmin
  Admin
  User
}

model Creator {
  id               Int             @id @default(autoincrement())
  email            String          @unique
  // password         String
  name             String          @unique
  slug             String          @unique
  avatar           String          @default("")
  banner           String          @default("")
  logo             String          @default("")
  description      String          @default("")
  flavorText       String          @default("")
  website          String          @default("")
  // twitter          String    @default("")
  // instagram        String    @default("")
  createdAt        DateTime        @default(now())
  deletedAt        DateTime?
  featuredAt       DateTime?
  verifiedAt       DateTime?
  popularizedAt    DateTime?
  emailConfirmedAt DateTime?
  comics           Comic[]
  wallet           Wallet          @relation(fields: [walletAddress], references: [address], onDelete: Cascade)
  walletAddress    String          @unique
  walletCreator    WalletCreator[]
}

model Comic {
  name             String        @unique
  slug             String        @id
  isMatureAudience Boolean
  cover            String        @default("")
  pfp              String        @default("")
  logo             String        @default("")
  description      String        @default("")
  flavorText       String        @default("")
  website          String        @default("")
  twitter          String        @default("")
  discord          String        @default("")
  telegram         String        @default("")
  instagram        String        @default("")
  tikTok           String        @default("")
  youTube          String        @default("")
  updatedAt        DateTime      @updatedAt
  createdAt        DateTime      @default(now())
  deletedAt        DateTime?
  featuredAt       DateTime?
  verifiedAt       DateTime?
  publishedAt      DateTime?
  popularizedAt    DateTime?
  completedAt      DateTime?
  genres           Genre[]
  issues           ComicIssue[]
  wallets          WalletComic[]
  creator          Creator       @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId        Int
}

model WalletComic {
  comic         Comic     @relation(fields: [comicSlug], references: [slug], onDelete: Cascade)
  comicSlug     String
  wallet        Wallet    @relation(fields: [walletAddress], references: [address], onDelete: Cascade)
  walletAddress String
  rating        Int?
  isSubscribed  Boolean   @default(false)
  isFavourite   Boolean   @default(false)
  isWhitelisted Boolean   @default(false)
  viewedAt      DateTime?
  // isReported Boolean @default(false)
  // isLiked    Boolean @default(false)

  @@id([comicSlug, walletAddress])
}

model Genre {
  name      String    @unique
  slug      String    @id
  icon      String    @default("")
  priority  Int
  color     String
  deletedAt DateTime?
  comics    Comic[]
}

model ComicIssue {
  id                Int                @id @default(autoincrement())
  number            Int
  supply            Int
  discountMintPrice Float
  mintPrice         Float
  title             String
  slug              String
  description       String             @default("")
  flavorText        String             @default("")
  cover             String             @default("")
  soundtrack        String             @default("")
  releaseDate       DateTime
  createdAt         DateTime           @default(now())
  deletedAt         DateTime?
  featuredAt        DateTime?
  verifiedAt        DateTime?
  publishedAt       DateTime?
  popularizedAt     DateTime?
  comic             Comic              @relation(fields: [comicSlug], references: [slug], onDelete: Cascade)
  comicSlug         String
  collectionNft     CollectionNft?
  pages             ComicPage[]
  wallets           WalletComicIssue[]

  @@unique([number, comicSlug])
  @@unique([slug, comicSlug])
  @@unique([title, comicSlug])
}

model Nft {
  address              String               @id
  uri                  String
  name                 String
  owner                Wallet               @relation(fields: [ownerAddress], references: [address])
  ownerAddress         String
  candyMachine         CandyMachine         @relation(fields: [candyMachineAddress], references: [address])
  candyMachineAddress  String
  collectionNft        CollectionNft        @relation(fields: [collectionNftAddress], references: [address])
  collectionNftAddress String
  receipt              CandyMachineReceipt?
}

model CandyMachine {
  address              String                @id
  mintAuthorityAddress String
  itemsAvailable       Int
  itemsMinted          Int
  itemsRemaining       Int
  itemsLoaded          Int
  isFullyLoaded        Boolean
  endsAt               DateTime?
  baseMintPrice        Float
  collectionNft        CollectionNft         @relation(fields: [collectionNftAddress], references: [address])
  collectionNftAddress String
  items                Nft[]
  receipts             CandyMachineReceipt[]
}

model CandyMachineReceipt {
  nftAddress          String       @id
  nft                 Nft          @relation(fields: [nftAddress], references: [address])
  buyer               Wallet       @relation(fields: [buyerAddress], references: [address])
  buyerAddress        String
  price               Float
  timestamp           DateTime
  description         String
  candyMachine        CandyMachine @relation(fields: [candyMachineAddress], references: [address], onDelete: Cascade)
  candyMachineAddress String
}

// ComicCollectionNft

model CollectionNft {
  address         String         @id
  uri             String
  name            String
  comicIssue      ComicIssue     @relation(fields: [comicIssueId], references: [id])
  comicIssueId    Int            @unique
  collectionItems Nft[]
  candyMachines   CandyMachine[]
}

model ComicPage {
  id            Int        @id @default(autoincrement())
  pageNumber    Int        @default(autoincrement())
  isPreviewable Boolean    @default(false)
  image         String
  comicIssue    ComicIssue @relation(fields: [comicIssueId], references: [id], onDelete: Cascade)
  comicIssueId  Int

  @@unique([pageNumber, comicIssueId])
}

model CarouselSlide {
  id          Int              @id @default(autoincrement())
  image       String
  title       String           @default("")
  subtitle    String           @default("")
  priority    Int
  link        String
  publishedAt DateTime         @default(now())
  expiredAt   DateTime
  location    CarouselLocation @default(Home)
}

enum CarouselLocation {
  Home
}

// enum CarouselSlideType {
//   Comic
//   ComicIssue
//   Creator
// }

model Newsletter {
  wallet                       Wallet  @relation(fields: [walletAddress], references: [address], onDelete: Cascade)
  walletAddress                String  @id
  email                        String  @unique
  wantsDevelopmentProgressNews Boolean
  wantsPlatformContentNews     Boolean
  wantsFreeNFTs                Boolean
  ip                           String  @default("")
  country                      String  @default("")
  city                         String  @default("")
  browser                      String  @default("")
  device                       String  @default("")
  os                           String  @default("")
}

model WalletComicIssue {
  comicIssue    ComicIssue @relation(fields: [comicIssueId], references: [id], onDelete: Cascade)
  comicIssueId  Int
  wallet        Wallet     @relation(fields: [walletAddress], references: [address], onDelete: Cascade)
  walletAddress String
  rating        Int?
  isSubscribed  Boolean    @default(false)
  isFavourite   Boolean    @default(false)
  isWhitelisted Boolean    @default(false)
  viewedAt      DateTime?
  readAt        DateTime?
  // isReported Boolean @default(false)
  // isLiked    Boolean @default(false)

  @@id([comicIssueId, walletAddress])
}

model WalletCreator {
  creator       Creator @relation(fields: [creatorSlug], references: [slug], onDelete: Cascade)
  creatorSlug   String
  wallet        Wallet  @relation(fields: [walletAddress], references: [address], onDelete: Cascade)
  walletAddress String
  isFollowing   Boolean @default(false)

  @@id([creatorSlug, walletAddress])
}

// TODO v1
// case insensitive slugs, emails etc. revise https://www.prisma.io/docs/concepts/components/prisma-client/case-sensitivity
// https://www.prisma.io/docs/concepts/components/prisma-client/full-text-search
// https://www.prisma.io/docs/reference/api-reference/prisma-client-reference#compare-columns-in-the-same-table
