generator client {
  provider = "prisma-client-js"
  // https://www.prisma.io/docs/concepts/components/prisma-client/full-text-search
  // https://www.prisma.io/docs/reference/api-reference/prisma-client-reference#compare-columns-in-the-same-table
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator dbml {
  provider = "prisma-dbml-generator"
}

model User {
  id                    Int                     @id @default(autoincrement())
  email                 String                  @unique
  password              String
  name                  String                  @unique
  avatar                String                  @default("")
  nonce                 String                  @unique @default(uuid())
  role                  Role                    @default(User)
  referrerId            Int?
  referralsRemaining    Int                     @default(0)
  deletedAt             DateTime?
  referredAt            DateTime?
  lastLogin             DateTime?
  lastActiveAt          DateTime?
  emailVerifiedAt       DateTime?
  createdAt             DateTime                @default(now())
  referCompeletedAt     DateTime?
  mintReceipts          CandyMachineReceipt[]
  comics                UserComic[]
  comicIssues           UserComicIssue[]
  creators              UserCreator[]
  wallets               Wallet[]
  referrer              User?                   @relation("ReferrerToReferral", fields: [referrerId], references: [id])
  referrals             User[]                  @relation("ReferrerToReferral")
  notifications         UserNotification[]
  devices               Device[]
  consents              UserPrivacyConsent[]
  userCandyMachineGroup UserCandyMachineGroup[]
}

model Wallet {
  address            String                    @id
  label              String                    @default("")
  userId             Int?
  createdAt          DateTime                  @default(now())
  connectedAt        DateTime?
  user               User?                     @relation(fields: [userId], references: [id])
  mintReceipts       CandyMachineReceipt[]
  candyMachineGroups WalletCandyMachineGroup[]
  digitalAssets      DigitalAsset[]
}

enum Role {
  Superadmin
  Admin
  Tester
  User
}

model Creator {
  id              Int           @id @default(autoincrement())
  email           String        @unique
  name            String        @unique
  slug            String        @unique
  password        String
  role            Role          @default(User)
  avatar          String        @default("")
  banner          String        @default("")
  logo            String        @default("")
  description     String        @default("")
  flavorText      String        @default("")
  website         String        @default("")
  twitter         String        @default("")
  instagram       String        @default("")
  lynkfire        String        @default("")
  discordId       String        @default("")
  tippingAddress  String        @default("")
  s3BucketSlug    String        @unique
  createdAt       DateTime      @default(now())
  deletedAt       DateTime?
  featuredAt      DateTime?
  verifiedAt      DateTime?
  popularizedAt   DateTime?
  lastLogin       DateTime?
  lastActiveAt    DateTime?
  emailVerifiedAt DateTime?
  comics          Comic[]
  userCreator     UserCreator[]
}

enum AudienceType {
  Everyone
  Teen
  TeenPlus
  Mature
}

model Comic {
  title         String
  slug          String              @id
  audienceType  AudienceType        @default(Everyone)
  cover         String              @default("")
  banner        String              @default("")
  logo          String              @default("")
  description   String              @default("")
  flavorText    String              @default("")
  website       String              @default("")
  twitter       String              @default("")
  discord       String              @default("")
  telegram      String              @default("")
  instagram     String              @default("")
  tikTok        String              @default("")
  youTube       String              @default("")
  s3BucketSlug  String              @unique
  updatedAt     DateTime            @updatedAt
  createdAt     DateTime            @default(now())
  featuredAt    DateTime?
  verifiedAt    DateTime?
  publishedAt   DateTime?
  popularizedAt DateTime?
  completedAt   DateTime?
  genres        Genre[]
  issues        ComicIssue[]
  users         UserComic[]
  creator       Creator             @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId     Int
  collaborators ComicCollaborator[]
}

model UserComic {
  comic         Comic     @relation(fields: [comicSlug], references: [slug], onDelete: Cascade)
  comicSlug     String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        Int
  rating        Int?
  subscribedAt  DateTime?
  favouritedAt  DateTime?
  bookmarkedAt  DateTime?
  whitelistedAt DateTime?
  viewedAt      DateTime?

  @@id([comicSlug, userId])
}

model Genre {
  name     String  @unique
  slug     String  @id
  icon     String  @default("")
  priority Int // should this be @unique?
  color    String
  comics   Comic[]
}

model RoyaltyWallet {
  address      String
  share        Int
  assetAddress String
  digitalAsset DigitalAsset @relation(fields: [assetAddress], references: [address])

  @@unique([assetAddress, address])
}

model ComicIssue {
  id                         Int                         @id @default(autoincrement())
  number                     Int
  sellerFeeBasisPoints       Int                         @default(0)
  title                      String
  slug                       String
  description                String                      @default("")
  flavorText                 String                      @default("")
  pdf                        String                      @default("")
  isFreeToRead               Boolean
  isFullyUploaded            Boolean                     @default(false)
  releaseDate                DateTime
  updatedAt                  DateTime                    @updatedAt
  isSecondarySaleActive      Boolean                     @default(false)
  createdAt                  DateTime                    @default(now())
  featuredAt                 DateTime?
  verifiedAt                 DateTime?
  publishedAt                DateTime?
  popularizedAt              DateTime?
  creatorAddress             String                      @default("")
  creatorBackupAddress       String                      @default("")
  comicSlug                  String
  s3BucketSlug               String
  comic                      Comic                       @relation(fields: [comicSlug], references: [slug], onDelete: Cascade)
  statelessCovers            StatelessCover[]
  statefulCovers             StatefulCover[]
  collectibleComicCollection CollectibleComicCollection?
  pages                      ComicPage[]
  users                      UserComicIssue[]
  collaborators              ComicIssueCollaborator[]

  @@unique([number, comicSlug])
  @@unique([slug, comicSlug])
  @@unique([title, comicSlug])
}

enum CollaboratorRole {
  Advisor
  Artist
  CoWriter
  Colorist
  CoverArtist
  CreativeDirector
  Editor
  Illustrator
  Inker
  Letterer
  Penciler
  Translator
  Writer
}

model ComicCollaborator {
  id        Int              @id @default(autoincrement())
  role      CollaboratorRole
  name      String
  comicSlug String
  comic     Comic            @relation(fields: [comicSlug], references: [slug], onDelete: Cascade)

  @@unique([role, name, comicSlug])
}

model ComicIssueCollaborator {
  id           Int              @id @default(autoincrement())
  role         CollaboratorRole
  name         String
  comicIssueId Int
  comicIssue   ComicIssue       @relation(fields: [comicIssueId], references: [id], onDelete: Cascade)

  @@unique([role, name, comicIssueId])
}

model StatelessCover {
  id                  Int         @id @default(autoincrement())
  image               String
  rarity              ComicRarity
  comicIssue          ComicIssue  @relation(fields: [comicIssueId], references: [id], onDelete: Cascade)
  comicIssueId        Int
  artist              String
  artistTwitterHandle String      @default("")
  share               Int
  isDefault           Boolean

  @@unique([comicIssueId, rarity])
}

model StatefulCover {
  id           Int         @id @default(autoincrement())
  image        String      @default("")
  isSigned     Boolean
  isUsed       Boolean
  rarity       ComicRarity
  comicIssue   ComicIssue  @relation(fields: [comicIssueId], references: [id], onDelete: Cascade)
  comicIssueId Int
  artist       String

  @@unique([comicIssueId, isSigned, isUsed, rarity])
}

enum ComicRarity {
  None
  Common
  Uncommon
  Rare
  Epic
  Legendary
}

model CollectibleComic {
  address             String                   @id
  metadata            CollectibleComicMetadata @relation(fields: [uri], references: [uri])
  uri                 String
  name                String
  candyMachine        CandyMachine             @relation(fields: [candyMachineAddress], references: [address])
  candyMachineAddress String
  receipt             CandyMachineReceipt?
  digitalAsset        DigitalAsset             @relation(fields: [address], references: [address])
}

model CandyMachine {
  address              String                     @id
  mintAuthorityAddress String
  authorityPda         String                     @unique
  supply               Int                        @default(0)
  itemsAvailable       Int
  itemsMinted          Int
  itemsRemaining       Int
  itemsLoaded          Int
  isFullyLoaded        Boolean
  lookupTable          String?
  collection           CollectibleComicCollection @relation(fields: [collectionAddress], references: [address])
  collectionAddress    String
  items                CollectibleComic[]
  receipts             CandyMachineReceipt[]
  groups               CandyMachineGroup[]
  standard             TokenStandard              @default(Core)
}

enum TokenStandard {
  Legacy
  Compression
  Core
}

model CandyMachineGroup {
  id                  Int                       @id @default(autoincrement())
  label               String
  displayLabel        String
  supply              Int
  mintLimit           Int?
  startDate           DateTime?
  endDate             DateTime?
  mintPrice           BigInt
  splTokenAddress     String
  wallets             WalletCandyMachineGroup[]
  users               UserCandyMachineGroup[]
  whiteListType       WhiteListType
  candyMachineAddress String
  candyMachine        CandyMachine              @relation(fields: [candyMachineAddress], references: [address])

  @@unique([label, candyMachineAddress])
}

enum WhiteListType {
  User
  Public
  WalletWhiteList
  UserWhiteList
}

model WalletCandyMachineGroup {
  wallet              Wallet            @relation(fields: [walletAddress], references: [address])
  walletAddress       String
  candyMachineGroup   CandyMachineGroup @relation(fields: [candyMachineGroupId], references: [id], onDelete: Cascade)
  candyMachineGroupId Int

  @@id([candyMachineGroupId, walletAddress])
}

model UserCandyMachineGroup {
  user                User              @relation(fields: [userId], references: [id])
  userId              Int
  candyMachineGroup   CandyMachineGroup @relation(fields: [candyMachineGroupId], references: [id], onDelete: Cascade)
  candyMachineGroupId Int

  @@id([candyMachineGroupId, userId])
}

model CandyMachineReceipt {
  collectibleComicAddress String           @id
  collectibleComic        CollectibleComic @relation(fields: [collectibleComicAddress], references: [address])
  buyer                   Wallet           @relation(fields: [buyerAddress], references: [address])
  userId                  Int?
  user                    User?            @relation(fields: [userId], references: [id])
  buyerAddress            String
  price                   BigInt
  timestamp               DateTime
  description             String
  candyMachine            CandyMachine     @relation(fields: [candyMachineAddress], references: [address], onDelete: Cascade)
  candyMachineAddress     String
  transactionSignature    String
  splTokenAddress         String
  label                   String           @default("")
}

model CollectibleComicCollection {
  address       String                     @id
  name          String
  comicIssue    ComicIssue                 @relation(fields: [comicIssueId], references: [id])
  comicIssueId  Int                        @unique
  candyMachines CandyMachine[]
  darkblockId   String?
  metadatas     CollectibleComicMetadata[]
  digitalAsset  DigitalAsset               @relation(fields: [address], references: [address])
}

model ComicPage {
  id            Int        @id @default(autoincrement())
  pageNumber    Int
  isPreviewable Boolean    @default(false)
  image         String
  comicIssue    ComicIssue @relation(fields: [comicIssueId], references: [id], onDelete: Cascade)
  comicIssueId  Int
  height        Int?
  width         Int?

  @@unique([pageNumber, comicIssueId])
}

model CarouselSlide {
  id           Int              @id @default(autoincrement())
  image        String
  // secondaryImage String      @default("")
  title        String           @default("")
  subtitle     String           @default("")
  priority     Int // should this be @unique?
  comicIssueId Int?
  comicSlug    String?
  creatorSlug  String?
  externalLink String?
  publishedAt  DateTime         @default(now())
  expiredAt    DateTime
  location     CarouselLocation @default(Home)
}

enum CarouselLocation {
  Home
}

model Newsletter {
  email        String    @id
  subscribedAt DateTime  @default(now())
  updatedAt    DateTime? @updatedAt
  ip           String    @default("")
  country      String    @default("")
  city         String    @default("")
  browser      String    @default("")
  device       String    @default("")
  os           String    @default("")
}

model UserComicIssue {
  comicIssue    ComicIssue @relation(fields: [comicIssueId], references: [id], onDelete: Cascade)
  comicIssueId  Int
  user          User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        Int
  rating        Int?
  subscribedAt  DateTime?
  favouritedAt  DateTime?
  whitelistedAt DateTime?
  viewedAt      DateTime?
  readAt        DateTime?

  @@id([comicIssueId, userId])
}

model UserCreator {
  creator     Creator   @relation(fields: [creatorSlug], references: [slug], onDelete: Cascade)
  creatorSlug String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  followedAt  DateTime?

  @@id([creatorSlug, userId])
}

model CollectibleComicMetadata {
  uri               String                     @id
  collectibleComics CollectibleComic[]
  collectionName    String
  collectionAddress String
  collection        CollectibleComicCollection @relation(fields: [collectionAddress], references: [address])
  isUsed            Boolean
  isSigned          Boolean
  rarity            ComicRarity

  @@unique([isUsed, isSigned, rarity, collectionAddress])
}

model Listing {
  id                  Int            @id @default(autoincrement())
  assetAddress        String
  price               BigInt
  sellerAddress       String
  signature           String
  createdAt           DateTime
  closedAt            DateTime
  source              String
  digitalAsset        DigitalAsset   @relation(fields: [assetAddress], references: [address])
  auctionHouse        AuctionHouse   @relation(fields: [auctionHouseAddress], references: [address])
  auctionHouseAddress String
  sale                AuctionSale?
  listingConfig       ListingConfig?

  @@unique([assetAddress, closedAt])
}

model ListingConfig {
  listingId          Int      @unique
  listing            Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)
  startDate          DateTime
  endDate            DateTime
  reservePrice       Int      @default(0)
  minBidIncrement    Int      @default(0)
  allowHighBidCancel Boolean  @default(false)
  highestBidId       Int?
}

model SplToken {
  id       Int    @id @default(autoincrement())
  name     String
  address  String @unique
  decimals Int
  symbol   String
  priority Int // should this be @unique?
  icon     String
}

enum GlobalStatusType {
  Success
  Info
  Warning
  Maintenance
}

model GlobalStatus {
  id        Int              @id @default(autoincrement())
  type      GlobalStatusType
  message   String
  expiresAt DateTime?
}

model Notification {
  id        Int                @id @default(autoincrement())
  title     String
  body      String
  image     String?
  createdAt DateTime           @default(now())
  users     UserNotification[]
}

model UserNotification {
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         Int
  notification   Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade)
  notificationId Int
  readAt         DateTime?

  @@id([userId, notificationId])
}

model Device {
  id     Int    @id @default(autoincrement())
  token  String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  @@unique([token, userId])
}

enum DurableNonceStatus {
  Available
  InUse
}

model DurableNonce {
  address       String             @id
  status        DurableNonceStatus @default(Available)
  nonce         String
  lastUpdatedAt DateTime           @default(now())
}

enum ConsentType {
  Marketing
  DataAnalytics
}

model UserPrivacyConsent {
  id             Int         @id @default(autoincrement())
  userId         Int
  createdAt      DateTime    @default(now())
  isConsentGiven Boolean     @default(false)
  consentType    ConsentType
  user           User        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model DraftComicIssueSalesData {
  id                Int       @id @default(autoincrement())
  comicIssueId      Int
  revenueRange      String
  supplyRange       String
  launchDateRange   String    @default("")
  // comma separated splToken.symbols
  currency          String
  royaltyBasisPoint Int       @default(0)
  royaltyAddress    String
  note              String    @default("")
  verifiedAt        DateTime?
}

model DigitalAssetGenre {
  name         String         @unique
  slug         String         @id
  digitalAsset DigitalAsset[]
}

model DigitalAsset {
  address                    String                      @id
  ownerAddress               String
  ownerChangedAt             DateTime
  owner                      Wallet                      @relation(fields: [ownerAddress], references: [address])
  oneOfOne                   OneOfOne?
  printEdition               PrintEdition?
  collectibleComic           CollectibleComic?
  oneOfOneCollection         OneOfOneCollection?
  printEditionCollection     PrintEditionCollection?
  collectibleComicCollection CollectibleComicCollection?
  traits                     DigitalAssetTrait[]
  genres                     DigitalAssetGenre[]
  tags                       DigitalAssetTag[]
  royaltyWallets             RoyaltyWallet[]
  listings                   Listing[]
  bids                       Bid[]
}

model OneOfOneCollection {
  address              String       @id()
  name                 String
  description          String
  image                String
  banner               String       @default("")
  digitalAsset         DigitalAsset @relation(fields: [address], references: [address])
  sellerFeeBasisPoints Int          @default(0)
  verifiedAt           DateTime?
  publishedAt          DateTime?
  oneOfOnes            OneOfOne[]
}

model AuctionHouse {
  address              String        @id
  treasuryMint         String        @unique
  sellerFeeBasisPoints Int           @default(0)
  requiresSignOff      Boolean
  canChangeSalePrice   Boolean
  listings             Listing[]
  bids                 Bid[]
  sales                AuctionSale[]
}

model AuctionSale {
  id                  Int          @id @default(autoincrement())
  signature           String
  price               BigInt
  soldAt              DateTime
  listingId           Int          @unique
  listing             Listing      @relation(fields: [listingId], references: [id])
  bidId               Int?         @unique
  bid                 Bid?         @relation(fields: [bidId], references: [id])
  auctionHouse        AuctionHouse @relation(fields: [auctionHouseAddress], references: [address])
  auctionHouseAddress String
}

model Bid {
  id                  Int          @id @default(autoincrement())
  assetAddress        String
  amount              BigInt
  bidderAddress       String
  signature           String
  createdAt           DateTime
  closedAt            DateTime
  digitalAsset        DigitalAsset @relation(fields: [assetAddress], references: [address])
  auctionHouse        AuctionHouse @relation(fields: [auctionHouseAddress], references: [address])
  auctionHouseAddress String
  sale                AuctionSale?

  @@unique([assetAddress, bidderAddress, closedAt])
}

model PrintEditionCollection {
  address                String                  @id
  name                   String
  description            String
  image                  String
  sellerFeeBasisPoints   Int                     @default(0)
  editions               PrintEdition[]
  digitalAsset           DigitalAsset            @relation(fields: [address], references: [address])
  isNSFW                 Boolean                 @default(false)
  verifiedAt             DateTime?
  publishedAt            DateTime?
  printEditionSaleConfig PrintEditionSaleConfig?
}

model PrintEditionSaleConfig {
  id                Int                    @id @default(autoincrement())
  startDate         DateTime?
  endDate           DateTime?
  mintPrice         BigInt
  currencyMint      String
  itemsMinted       Int                    @default(0)
  supply            Int
  isActive          Boolean                @default(true)
  collectionAddress String                 @unique
  collection        PrintEditionCollection @relation(fields: [collectionAddress], references: [address])
}

model DigitalAssetTag {
  id           Int          @id @default(autoincrement())
  value        String
  assetAddress String
  digitalAsset DigitalAsset @relation(fields: [assetAddress], references: [address])
}

model PrintEdition {
  address                String                 @id
  collectionAddress      String
  printEditionCollection PrintEditionCollection @relation(fields: [collectionAddress], references: [address])
  number                 Int
  digitalAsset           DigitalAsset           @relation(fields: [address], references: [address])
}

model OneOfOne {
  address              String              @id
  name                 String
  description          String
  image                String
  digitalAsset         DigitalAsset        @relation(fields: [address], references: [address])
  collectionAddress    String?
  sellerFeeBasisPoints Int                 @default(0)
  verifiedAt           DateTime?
  publishedAt          DateTime?
  isNSFW               Boolean             @default(false)
  collection           OneOfOneCollection? @relation(fields: [collectionAddress], references: [address])
}

model DigitalAssetTrait {
  id           Int          @id @default(autoincrement())
  name         String
  value        String
  assetAddress String
  digitalAsset DigitalAsset @relation(fields: [assetAddress], references: [address])
}
