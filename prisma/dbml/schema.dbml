//// ------------------------------------------------------
//// THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
//// ------------------------------------------------------

Table User {
  id Int [pk, increment]
  email String [unique, not null]
  password String [not null]
  name String [unique, not null]
  avatar String [not null, default: '']
  nonce String [unique, not null]
  role Role [not null, default: 'User']
  referrerId Int
  referralsRemaining Int [not null, default: 0]
  deletedAt DateTime
  referredAt DateTime
  lastLogin DateTime
  lastActiveAt DateTime
  emailVerifiedAt DateTime
  createdAt DateTime [default: `now()`, not null]
  referCompeletedAt DateTime
  mintReceipts CandyMachineReceipt [not null]
  comics UserComic [not null]
  comicIssues UserComicIssue [not null]
  creators UserCreator [not null]
  wallets Wallet [not null]
  referrer User
  referrals User [not null]
  notifications UserNotification [not null]
  devices Device [not null]
  consents UserPrivacyConsent [not null]
  userCandyMachineGroup UserCandyMachineGroup [not null]
}

Table Wallet {
  address String [pk]
  label String [not null, default: '']
  userId Int
  createdAt DateTime [default: `now()`, not null]
  connectedAt DateTime
  user User
  mintReceipts CandyMachineReceipt [not null]
  assets DigitalAsset [not null]
  candyMachineGroups WalletCandyMachineGroup [not null]
}

Table Creator {
  id Int [pk, increment]
  email String [unique, not null]
  name String [unique, not null]
  slug String [unique, not null]
  password String [not null]
  role Role [not null, default: 'User']
  avatar String [not null, default: '']
  banner String [not null, default: '']
  logo String [not null, default: '']
  description String [not null, default: '']
  flavorText String [not null, default: '']
  website String [not null, default: '']
  twitter String [not null, default: '']
  instagram String [not null, default: '']
  lynkfire String [not null, default: '']
  discordId String [not null, default: '']
  tippingAddress String [not null, default: '']
  s3BucketSlug String [unique, not null]
  createdAt DateTime [default: `now()`, not null]
  deletedAt DateTime
  featuredAt DateTime
  verifiedAt DateTime
  popularizedAt DateTime
  lastLogin DateTime
  lastActiveAt DateTime
  emailVerifiedAt DateTime
  comics Comic [not null]
  userCreator UserCreator [not null]
}

Table Comic {
  title String [not null]
  slug String [pk]
  audienceType AudienceType [not null, default: 'Everyone']
  cover String [not null, default: '']
  banner String [not null, default: '']
  logo String [not null, default: '']
  description String [not null, default: '']
  flavorText String [not null, default: '']
  website String [not null, default: '']
  twitter String [not null, default: '']
  discord String [not null, default: '']
  telegram String [not null, default: '']
  instagram String [not null, default: '']
  tikTok String [not null, default: '']
  youTube String [not null, default: '']
  s3BucketSlug String [unique, not null]
  updatedAt DateTime [not null]
  createdAt DateTime [default: `now()`, not null]
  featuredAt DateTime
  verifiedAt DateTime
  publishedAt DateTime
  popularizedAt DateTime
  completedAt DateTime
  genres Genre [not null]
  issues ComicIssue [not null]
  users UserComic [not null]
  creator Creator [not null]
  creatorId Int [not null]
  collaborators ComicCollaborator [not null]
}

Table UserComic {
  comic Comic [not null]
  comicSlug String [not null]
  user User [not null]
  userId Int [not null]
  rating Int
  subscribedAt DateTime
  favouritedAt DateTime
  bookmarkedAt DateTime
  whitelistedAt DateTime
  viewedAt DateTime

  indexes {
    (comicSlug, userId) [pk]
  }
}

Table Genre {
  name String [unique, not null]
  slug String [pk]
  icon String [not null, default: '']
  priority Int [not null]
  color String [not null]
  comics Comic [not null]
}

Table RoyaltyWallet {
  address String [not null]
  share Int [not null]
  comicIssue ComicIssue [not null]
  comicIssueId Int [not null]

  indexes {
    (address, comicIssueId) [unique]
  }
}

Table ComicIssue {
  id Int [pk, increment]
  number Int [not null]
  sellerFeeBasisPoints Int [not null, default: 0]
  title String [not null]
  slug String [not null]
  description String [not null, default: '']
  flavorText String [not null, default: '']
  pdf String [not null, default: '']
  isFreeToRead Boolean [not null]
  isFullyUploaded Boolean [not null, default: false]
  releaseDate DateTime [not null]
  updatedAt DateTime [not null]
  isSecondarySaleActive Boolean [not null, default: false]
  createdAt DateTime [default: `now()`, not null]
  featuredAt DateTime
  verifiedAt DateTime
  publishedAt DateTime
  popularizedAt DateTime
  creatorAddress String [not null, default: '']
  creatorBackupAddress String [not null, default: '']
  comicSlug String [not null]
  s3BucketSlug String [not null]
  comic Comic [not null]
  royaltyWallets RoyaltyWallet [not null]
  statelessCovers StatelessCover [not null]
  statefulCovers StatefulCover [not null]
  collection Collection
  pages ComicPage [not null]
  users UserComicIssue [not null]
  collaborators ComicIssueCollaborator [not null]

  indexes {
    (number, comicSlug) [unique]
    (slug, comicSlug) [unique]
    (title, comicSlug) [unique]
  }
}

Table ComicCollaborator {
  id Int [pk, increment]
  role CollaboratorRole [not null]
  name String [not null]
  comicSlug String [not null]
  comic Comic [not null]

  indexes {
    (role, name, comicSlug) [unique]
  }
}

Table ComicIssueCollaborator {
  id Int [pk, increment]
  role CollaboratorRole [not null]
  name String [not null]
  comicIssueId Int [not null]
  comicIssue ComicIssue [not null]

  indexes {
    (role, name, comicIssueId) [unique]
  }
}

Table StatelessCover {
  id Int [pk, increment]
  image String [not null]
  rarity ComicRarity [not null]
  comicIssue ComicIssue [not null]
  comicIssueId Int [not null]
  artist String [not null]
  artistTwitterHandle String [not null, default: '']
  share Int [not null]
  isDefault Boolean [not null]

  indexes {
    (comicIssueId, rarity) [unique]
  }
}

Table StatefulCover {
  id Int [pk, increment]
  image String [not null, default: '']
  isSigned Boolean [not null]
  isUsed Boolean [not null]
  rarity ComicRarity [not null]
  comicIssue ComicIssue [not null]
  comicIssueId Int [not null]
  artist String [not null]

  indexes {
    (comicIssueId, isSigned, isUsed, rarity) [unique]
  }
}

Table DigitalAsset {
  address String [pk]
  metadata Metadata [not null]
  uri String [not null]
  name String [not null]
  owner Wallet [not null]
  ownerAddress String [not null]
  ownerChangedAt DateTime [not null]
  candyMachine CandyMachine [not null]
  candyMachineAddress String [not null]
  receipt CandyMachineReceipt
  listing Listing [not null]
}

Table CandyMachine {
  address String [pk]
  mintAuthorityAddress String [not null]
  authorityPda String [unique, not null]
  supply Int [not null, default: 0]
  itemsAvailable Int [not null]
  itemsMinted Int [not null]
  itemsRemaining Int [not null]
  itemsLoaded Int [not null]
  isFullyLoaded Boolean [not null]
  lookupTable String
  collection Collection [not null]
  collectionAddress String [not null]
  items DigitalAsset [not null]
  receipts CandyMachineReceipt [not null]
  groups CandyMachineGroup [not null]
  standard TokenStandard [not null, default: 'Legacy']
}

Table CandyMachineGroup {
  id Int [pk, increment]
  label String [not null]
  displayLabel String [not null]
  supply Int [not null]
  mintLimit Int
  startDate DateTime
  endDate DateTime
  mintPrice BigInt [not null]
  splTokenAddress String [not null]
  wallets WalletCandyMachineGroup [not null]
  users UserCandyMachineGroup [not null]
  whiteListType WhiteListType [not null]
  candyMachineAddress String [not null]
  candyMachine CandyMachine [not null]

  indexes {
    (label, candyMachineAddress) [unique]
  }
}

Table WalletCandyMachineGroup {
  wallet Wallet [not null]
  walletAddress String [not null]
  candyMachineGroup CandyMachineGroup [not null]
  candyMachineGroupId Int [not null]

  indexes {
    (candyMachineGroupId, walletAddress) [pk]
  }
}

Table UserCandyMachineGroup {
  user User [not null]
  userId Int [not null]
  candyMachineGroup CandyMachineGroup [not null]
  candyMachineGroupId Int [not null]

  indexes {
    (candyMachineGroupId, userId) [pk]
  }
}

Table CandyMachineReceipt {
  assetAddress String [pk]
  asset DigitalAsset [not null]
  buyer Wallet [not null]
  userId Int
  user User
  buyerAddress String [not null]
  price BigInt [not null]
  timestamp DateTime [not null]
  description String [not null]
  candyMachine CandyMachine [not null]
  candyMachineAddress String [not null]
  transactionSignature String [not null]
  splTokenAddress String [not null]
  label String [not null, default: '']
}

Table Collection {
  address String [pk]
  name String [not null]
  comicIssue ComicIssue [not null]
  comicIssueId Int [unique, not null]
  candyMachines CandyMachine [not null]
  darkblockId String
  metadatas Metadata [not null]
}

Table ComicPage {
  id Int [pk, increment]
  pageNumber Int [not null]
  isPreviewable Boolean [not null, default: false]
  image String [not null]
  comicIssue ComicIssue [not null]
  comicIssueId Int [not null]
  height Int
  width Int

  indexes {
    (pageNumber, comicIssueId) [unique]
  }
}

Table CarouselSlide {
  id Int [pk, increment]
  image String [not null]
  title String [not null, default: '']
  subtitle String [not null, default: '']
  priority Int [not null]
  comicIssueId Int
  comicSlug String
  creatorSlug String
  externalLink String
  publishedAt DateTime [default: `now()`, not null]
  expiredAt DateTime [not null]
  location CarouselLocation [not null, default: 'Home']
}

Table Newsletter {
  email String [pk]
  subscribedAt DateTime [default: `now()`, not null]
  updatedAt DateTime
  ip String [not null, default: '']
  country String [not null, default: '']
  city String [not null, default: '']
  browser String [not null, default: '']
  device String [not null, default: '']
  os String [not null, default: '']
}

Table UserComicIssue {
  comicIssue ComicIssue [not null]
  comicIssueId Int [not null]
  user User [not null]
  userId Int [not null]
  rating Int
  subscribedAt DateTime
  favouritedAt DateTime
  whitelistedAt DateTime
  viewedAt DateTime
  readAt DateTime

  indexes {
    (comicIssueId, userId) [pk]
  }
}

Table UserCreator {
  creator Creator [not null]
  creatorSlug String [not null]
  user User [not null]
  userId Int [not null]
  followedAt DateTime

  indexes {
    (creatorSlug, userId) [pk]
  }
}

Table Metadata {
  uri String [pk]
  asset DigitalAsset [not null]
  collectionName String [not null]
  collectionAddress String [not null]
  collection Collection [not null]
  isUsed Boolean [not null]
  isSigned Boolean [not null]
  rarity ComicRarity [not null]

  indexes {
    (isUsed, isSigned, rarity, collectionAddress) [unique]
  }
}

Table Listing {
  id Int [pk, increment]
  assetAddress String [not null]
  asset DigitalAsset [not null]
  price BigInt [not null]
  feePayer String [not null]
  signature String [not null]
  symbol String [not null]
  createdAt DateTime [not null]
  canceledAt DateTime [not null]
  soldAt DateTime
  saleTransactionSignature String
  source String

  indexes {
    (assetAddress, canceledAt) [unique]
  }
}

Table SplToken {
  id Int [pk, increment]
  name String [not null]
  address String [not null]
  decimals Int [not null]
  symbol String [not null]
  priority Int [not null]
  icon String [not null]
}

Table GlobalStatus {
  id Int [pk, increment]
  type GlobalStatusType [not null]
  message String [not null]
  expiresAt DateTime
}

Table Notification {
  id Int [pk, increment]
  title String [not null]
  body String [not null]
  image String
  createdAt DateTime [default: `now()`, not null]
  users UserNotification [not null]
}

Table UserNotification {
  user User [not null]
  userId Int [not null]
  notification Notification [not null]
  notificationId Int [not null]
  readAt DateTime

  indexes {
    (userId, notificationId) [pk]
  }
}

Table Device {
  id Int [pk, increment]
  token String [not null]
  user User [not null]
  userId Int [not null]

  indexes {
    (token, userId) [unique]
  }
}

Table DurableNonce {
  address String [pk]
  status DurableNonceStatus [not null, default: 'Available']
  nonce String [not null]
  lastUpdatedAt DateTime [default: `now()`, not null]
}

Table UserPrivacyConsent {
  id Int [pk, increment]
  userId Int [not null]
  createdAt DateTime [default: `now()`, not null]
  isConsentGiven Boolean [not null, default: false]
  consentType ConsentType [not null]
  user User [not null]
}

Table DraftComicIssueSalesData {
  id Int [pk, increment]
  comicIssueId Int [not null]
  revenueRange String [not null]
  supplyRange String [not null]
  launchDateRange String [not null, default: '']
  currency String [not null]
  royaltyBasisPoint Int [not null, default: 0]
  royaltyAddress String [not null]
  note String [not null, default: '']
  verifiedAt DateTime
}

Enum Role {
  Superadmin
  Admin
  Tester
  User
}

Enum AudienceType {
  Everyone
  Teen
  TeenPlus
  Mature
}

Enum CollaboratorRole {
  Advisor
  Artist
  CoWriter
  Colorist
  CoverArtist
  CreativeDirector
  Editor
  Illustrator
  Inker
  Letterer
  Penciler
  Translator
  Writer
}

Enum ComicRarity {
  None
  Common
  Uncommon
  Rare
  Epic
  Legendary
}

Enum TokenStandard {
  Legacy
  Compression
  Core
}

Enum WhiteListType {
  User
  Public
  WalletWhiteList
  UserWhiteList
}

Enum CarouselLocation {
  Home
}

Enum GlobalStatusType {
  Success
  Info
  Warning
  Maintenance
}

Enum DurableNonceStatus {
  Available
  InUse
}

Enum ConsentType {
  Marketing
  DataAnalytics
}

Ref: User.referrerId - User.id

Ref: Wallet.userId > User.id

Ref: Comic.creatorId > Creator.id [delete: Cascade]

Ref: UserComic.comicSlug > Comic.slug [delete: Cascade]

Ref: UserComic.userId > User.id [delete: Cascade]

Ref: RoyaltyWallet.comicIssueId > ComicIssue.id [delete: Cascade]

Ref: ComicIssue.comicSlug > Comic.slug [delete: Cascade]

Ref: ComicCollaborator.comicSlug > Comic.slug [delete: Cascade]

Ref: ComicIssueCollaborator.comicIssueId > ComicIssue.id [delete: Cascade]

Ref: StatelessCover.comicIssueId > ComicIssue.id [delete: Cascade]

Ref: StatefulCover.comicIssueId > ComicIssue.id [delete: Cascade]

Ref: DigitalAsset.uri > Metadata.uri

Ref: DigitalAsset.ownerAddress > Wallet.address

Ref: DigitalAsset.candyMachineAddress > CandyMachine.address

Ref: CandyMachine.collectionAddress > Collection.address

Ref: CandyMachineGroup.candyMachineAddress > CandyMachine.address

Ref: WalletCandyMachineGroup.walletAddress > Wallet.address

Ref: WalletCandyMachineGroup.candyMachineGroupId > CandyMachineGroup.id [delete: Cascade]

Ref: UserCandyMachineGroup.userId > User.id

Ref: UserCandyMachineGroup.candyMachineGroupId > CandyMachineGroup.id [delete: Cascade]

Ref: CandyMachineReceipt.assetAddress - DigitalAsset.address

Ref: CandyMachineReceipt.buyerAddress > Wallet.address

Ref: CandyMachineReceipt.userId > User.id

Ref: CandyMachineReceipt.candyMachineAddress > CandyMachine.address [delete: Cascade]

Ref: Collection.comicIssueId - ComicIssue.id

Ref: ComicPage.comicIssueId > ComicIssue.id [delete: Cascade]

Ref: UserComicIssue.comicIssueId > ComicIssue.id [delete: Cascade]

Ref: UserComicIssue.userId > User.id [delete: Cascade]

Ref: UserCreator.creatorSlug > Creator.slug [delete: Cascade]

Ref: UserCreator.userId > User.id [delete: Cascade]

Ref: Metadata.collectionAddress > Collection.address

Ref: Listing.assetAddress > DigitalAsset.address

Ref: UserNotification.userId > User.id [delete: Cascade]

Ref: UserNotification.notificationId > Notification.id [delete: Cascade]

Ref: Device.userId > User.id [delete: Cascade]

Ref: UserPrivacyConsent.userId > User.id [delete: Cascade]